#include <Register.hpp>

{%- set peripheral_name = peripheral.name.upper() %}
{%- set struct_type = peripheral.name.lower() + "_t" %}

namespace {{ peripheral_name }}
{
    struct {{ struct_type }}{};

    {%- for enumerated_value in enum_values %}
    enum class {{ enumerated_value }} : std::uint32_t
    {
        {%- for value in enum_values[enumerated_value] %}
        {%- if value.name[0].isdigit() %}
        {{ enumerated_value }}_{{ value.name }} = {{ value.value }}, // {{ value.description }}
        {%- else %}
        {{ value.name }} = {{ value.value }}, // {{ value.description }}
        {%- endif %}
        {%- endfor %}
    };
    {%- endfor %}

    constexpr std::uint32_t {{ peripheral_name }}_BASE_ADDRESS = {{ peripheral.base_address }}u;
{% for reg in peripheral.registers -%}
    {% if reg.name.startswith('DUPLICATE:') %}

    {% else %}
        {%- for field in reg.fields %}
            {%- if field.enumerated_values %}
                {%- if field.name not in enum_values %}
        enum class {{ field.name }} : std::uint{{ reg.size }}_t
        {
            {%- for enumerated_value in field.enumerated_values %}
                {%- if enumerated_value.name[0].isdigit() %}
            {% if field.name == reg.name %}{{ field.name }}_{% else %}{{ reg.name }}_{{ field.name }}{% endif %}{{ enumerated_value.name }} = {{ enumerated_value.value * field.bit_offset }}, // {{ enumerated_value.description }}
                {%- else %}
            {{ enumerated_value.name }} = {{ enumerated_value.value * field.bit_offset }}, // {{ enumerated_value.description }}
                {%- endif %}
            {%- endfor %}
        };
                {%- endif %}

        {%- else %}
        constexpr auto {% if field.name == reg.name %}{{ field.name }}_{% else %}{{ reg.name | replace("[", "_")  | replace("]", "") }}_{{ field.name }}{% endif %} = BitField<{{ struct_type }}, {{ field.bit_offset }}, {{ field.bit_width }}, "{{ field.name }}"{% if field.access %}, {{ field.access.upper() | replace("-", "") }}{% endif %}>{}; // bit offset: {{ field.bit_offset }}, bit width: {{ field.bit_width }}, {{ field.description }}
        {%- endif %}
        {%- endfor %}
        static Register<std::uint32_t, {{ peripheral_name }}_BASE_ADDRESS + {{ reg.address_offset }}u, {% if reg.reset_value == None %}0{% else %}{{ reg.reset_value }}{% endif %}{% if reg.access %}, {{ reg.access.upper() | replace("-", "") }}{% else %}, READWRITE{% endif %}, "{{ reg.name.upper() }}"
        {%- for field in reg.fields -%}
            {%- if field.enumerated_values -%}
        , {{ field.name }}
            {%- else -%}
        , decltype({% if field.name == reg.name %}{{ field.name }}_{% else %}{{ reg.name | replace("[", "_")  | replace("]", "") }}_{{ field.name }}{% endif %})
            {%- endif %}
        {%- endfor %}> {{ reg.name.upper() | replace("[", "_")  | replace("]", "") }}; // {{ reg.description }}
    {% endif %}
{% endfor %}
} // namespace {{ peripheral_name }}
