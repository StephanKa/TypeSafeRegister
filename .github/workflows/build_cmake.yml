name: C/C++ CMake CI

on: [push, pull_request]

env:  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"

jobs:
  docker:
    name: Test docker images
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Build docker-ci image
        shell: bash
        run: cd docker && ./build-ci-image.sh

      - name: Build docker-dev image
        shell: bash
        run: cd docker && ./build-dev-image.sh

  linux:
    name: ${{ matrix.os }}, ${{ matrix.compiler.name }}, ${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # 'false' means Don't stop matrix workflows even if some matrix entry fails.
      matrix:
        os: [ubuntu-22.04]
        buildtype: [debug, release]
        compiler: [ {name: 'GCC 11', preset: gcc-11, pkgs: 'gcc-11 g++-11 lib32gcc-11-dev gcc-multilib'},
                    {name: 'GCC 12', preset: gcc-12, pkgs: 'gcc-12 g++-12 lib32gcc-12-dev gcc-multilib'},
                    {name: 'Clang 15', preset: clang-15, version: '15'},
                    {name: 'Clang 16', preset: clang-16, version: '16'},
                    {name: 'Clang 17', preset: clang-17, version: '17'}
                  ]
    steps:
    - uses: actions/checkout@v2

    - name: Cache
      uses: actions/cache@v2
      env:
        cache-name: cache-conan-modules
      with:
        path: |
          ${{ env.CONAN_USER_HOME }}
          ~/.cache/pip
        key: ${{ runner.os }}-${{ env.BUILD_TYPE }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('cmake/Conan.cmake') }}

    - name: Install LLVM dependencies
      if: ${{ startsWith(matrix.compiler.name, 'Clang') }}
      run:   |
             sudo apt update
             sudo apt install ninja-build
             sudo apt-get purge --auto-remove llvm python3-lldb-14 llvm-14 # https://github.com/llvm/llvm-project/issues/64182
             wget https://apt.llvm.org/llvm.sh
             sudo chmod -x llvm.sh
             sudo bash llvm.sh ${{ matrix.compiler.version }}
      shell: bash

    - name: Install dependencies
      if: ${{ startsWith(matrix.compiler.name, 'GCC') }}
      run:   |
             sudo apt update
             sudo apt install ninja-build ${{ matrix.compiler.pkgs }}
      shell: bash

    - name: Install python dependencies
      run:   |
             python3 -m pip install --upgrade pip setuptools pipenv
             python3 -m pip install conan jsonschema virtualenv ninja
             python3 -m pip install 'git+https://github.com/posborne/cmsis-svd.git#egg=cmsis-svd&subdirectory=python'
      shell: bash

    - name: Install conan
      shell: bash
      run: source ~/.profile

    - name: Configure via CMake
      shell: bash
      run: cmake --preset ${{ matrix.compiler.preset }}-${{ matrix.buildtype }}

    - name: Build
      shell: bash
      run:  cmake --build --preset ${{ matrix.compiler.preset }}-${{ matrix.buildtype }}

    - name: Test
      shell: bash
      run: ctest --preset ${{ matrix.compiler.preset }}-${{ matrix.buildtype }}

  windows:
    name: ${{ matrix.os }}, ${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # 'false' means Don't stop matrix workflows even if some matrix entry fails.
      matrix:
        os: [windows-2022, windows-2019]
        buildtype: [debug]
    steps:
      - uses: actions/checkout@v3
      - name: Install conan
        shell: bash
        run: |
          python3 -m pip install --upgrade pip setuptools
          python3 -m pip install conan jsonschema virtualenv ninja
          python3 -m pip install -U -e 'git+https://github.com/posborne/cmsis-svd.git#egg=cmsis-svd&subdirectory=python'

      - name: Configure CMake
        shell: bash
        run: cmake --preset ${{ matrix.os }}-${{ matrix.buildtype }}

      - name: Build
        shell: bash
        run:  cmake --build --preset ${{ matrix.os }}-${{ matrix.buildtype }}

      - name: Test
        shell: bash
        run: ctest --preset ${{ matrix.os }}-${{ matrix.buildtype }}

    linux-static_analysis:
      name: Static Analysis, ${{ matrix.os }}, ${{ matrix.compiler.name }}, ${{ matrix.buildtype }}
      runs-on: ${{ matrix.os }}
      strategy:
        fail-fast: false  # 'false' means Don't stop matrix workflows even if some matrix entry fails.
        matrix:
          os: [ubuntu-22.04]
          buildtype: [debug]
          compiler: [{name: 'Clang 15', preset: clang-15, pkgs: 'clang-15 llvm-15 llvm-15-dev libclang-15-dev', iwyu_branch: 'clang_15', path_prefix: "/usr/lib/llvm-15"}]

      steps:
      - uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v3
        env:
          cache-name: cache-conan-modules
        with:
          path: |
            ${{ env.CONAN_USER_HOME }}
            ~/.cache/pip
          key: ${{ runner.os }}-${{ env.BUILD_TYPE }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('cmake/Conan.cmake') }}

      - name: Install conan
        shell: bash
        run: |
          python3 -m pip install --upgrade pip setuptools
          python3 -m pip install conan jsonschema virtualenv ninja
          python3 -m pip install -U -e 'git+https://github.com/posborne/cmsis-svd.git#egg=cmsis-svd&subdirectory=python'
          source ~/.profile

      - name: Install dependencies
        run:   |
               sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
               sudo apt update
               sudo apt install ninja-build ${{ matrix.compiler.pkgs }} cppcheck
        shell: bash

      - name: Compile and install IWYU
        run:   |
               mkdir iwyu && cd iwyu
               git clone https://github.com/include-what-you-use/include-what-you-use.git
               cd include-what-you-use
               git checkout ${{ matrix.compiler.iwyu_branch }}
               cd ..
               mkdir build && cd build
               cmake -G "Ninja" -DCMAKE_PREFIX_PATH=${{ matrix.compiler.path_prefix }} ../include-what-you-use
               ninja
               sudo ninja install
        shell: bash

      - name: Configure via CMake
        shell: bash
        run: cmake --preset ${{ matrix.compiler.preset }}-${{ matrix.buildtype }}-static-analysis

      - name: Build
        shell: bash
        run:  cmake --build --preset ${{ matrix.compiler.preset }}-${{ matrix.buildtype }}-static-analysis

  linux-cross-compiling-armv7:
    name: ARM GCC, ${{ matrix.os }}, ${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # 'false' means Don't stop matrix workflows even if some matrix entry fails.
      matrix:
        os: [ubuntu-22.04]
        buildtype: [debug, release]

    steps:
    - uses: actions/checkout@v3

    - name: Cache
      uses: actions/cache@v3
      env:
        cache-name: cache-conan-modules
      with:
        path: |
          ${{ env.CONAN_USER_HOME }}
          ~/.cache/pip
        key: ${{ runner.os }}-${{ env.BUILD_TYPE }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('cmake/Conan.cmake') }}

    - name: Install conan
      shell: bash
      run: |
        python3 -m pip install --upgrade pip setuptools
        python3 -m pip install conan jsonschema virtualenv ninja
        python3 -m pip install -U -e 'git+https://github.com/posborne/cmsis-svd.git#egg=cmsis-svd&subdirectory=python'
        source ~/.profile

    - name: Install dependencies
      run:   |
             sudo apt update
             sudo apt install ninja-build wget ccache
      shell: bash

    - name: Install GCC ARM
      run:   |
             wget -O archive.tar.xz "https://developer.arm.com/-/media/Files/downloads/gnu/12.2.rel1/binrel/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi.tar.xz?rev=7bd049b7a3034e64885fa1a71c12f91d&hash=732D909FA8F68C0E1D0D17D08E057619" && \
             echo 84be93d0f9e96a15addd490b6e237f588c641c8afdf90e7610a628007fc96867 archive.tar.xz > /tmp/archive.sha256 && sha256sum -c /tmp/archive.sha256 && rm /tmp/archive.sha256 && \
             tar xf archive.tar.xz -C /opt
      shell: bash

    - name: Configure via CMake
      shell: bash
      run: cmake --preset gcc-arm-${{ matrix.buildtype }}

    - name: Build
      shell: bash
      run:  cmake --build --preset gcc-arm-${{ matrix.buildtype }}
