import re
import json
import os
import sys
from cmsis_svd.parser import SVDParser
from jinja2 import Environment, FileSystemLoader

if __name__ == '__main__':
    file_loader = FileSystemLoader('{0}/../templates'.format(sys.argv[1]))
    env = Environment(loader=file_loader)
    parser = SVDParser.for_packaged_svd('@CHIP_MANUFACTURER@', '@CHIP_FAMILY@')
    svd_dict = parser.get_device().to_dict()
    with open("test.json", "w") as f:
        f.write(json.dumps(svd_dict, sort_keys=True, indent=4, separators=(',', ': ')))

    peripherals = parser.get_device().peripherals
    peripherals = sorted(peripherals, key=lambda x: x.base_address)
    enumerated_values_dict = dict()
    for peripheral in peripherals:
        s = ""
        peripheral.base_address = "0x%08x" % peripheral.base_address
        upper_peripheral_name = peripheral.name.upper()
        if upper_peripheral_name not in enumerated_values_dict:
            enumerated_values_dict[upper_peripheral_name] = dict()
        reg_names = list()
        for reg in peripheral.registers:
            reg.fields = sorted(reg.fields, key=lambda x: x.bit_offset)
            reg.description = re.sub(" +", " ", reg.description.replace("\n", ""))
            if reg.name in reg_names:
                reg.name = "DUPLICATE:{0}".format(reg.name)
                continue
            reg_names.append(reg.name)
            if not isinstance(reg.address_offset, str):
                reg.address_offset = "0x%08x" % reg.address_offset
            else:
                reg.address_offset = reg.address_offset
            for field in reg.fields:
                if field.is_enumerated_type:
                    if field.name not in enumerated_values_dict[upper_peripheral_name]:
                        enumerated_values_dict[upper_peripheral_name][field.name] = list()
                        for enumerated_value in field.enumerated_values:
                            enumerated_values_dict[upper_peripheral_name][field.name].append({"name": enumerated_value.name, "description": enumerated_value.description, "value": enumerated_value.value << field.bit_offset})
                            enumerated_value.description = re.sub(" +", " ", enumerated_value.description.replace("\n", ""))
                else:
                    field.description = re.sub(" +", " ", field.description.replace("\n", ""))

    template = env.get_template('Peripherals.jinja2')
    if not os.path.exists("{0}/generated".format(sys.argv[1])):
        os.mkdir("{0}/generated".format(sys.argv[1]))
    for peripheral in peripherals:
        output = template.render(peripheral=peripheral, enum_values=enumerated_values_dict[peripheral.name.upper()])
        with open("{0}/generated/{1}.hpp".format(sys.argv[1], peripheral.name.upper()), "w") as f:
            f.write(output)
